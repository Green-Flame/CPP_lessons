0. Итератор — интерфейс, предоставляющий доступ к элементам контейнера и навигацию по ним. То есть, структура данных, которая «указывает» на некоторый элемент контейнера и способ перейти к следующему элементу. Итераторы нужны для создания универсальных алгоритмов, которые не зависят от структуры данных контейнера. 

Для всех определённых в STL операторов определены следующие операции: разыменование *, сравнивание на предмет эквивалентности == и неэквивалентности !=. При этом если два итератора эквивалентны, то разыменование одного должно порождать то же значение, что и разыменование другого. 

В библиотеке STL определены пять видов итераторов:

1) Входной (input iterator). Применяется для считывания значений из контейнера (но не изменения). Обеспечивает доступ ко всем значениям в контейнере: определена операция ++ в префиксной и постфиксной форме. При этом нет гарантии, что второй проход по элементам контейнера будет выполнен в той же последовательности. Является однонаправленным; его можно инкрементировать, но нельзя возвращать предшествующие состояния.
2) Выходной (output iterator). Аналогичен входному за исключением того, что его разыменование гарантированно предоствляет программе возиожность изменять значение контейнера, но не читать его.
3) Однонаправленный. Также использует только операцию  ++ для навигации по контейнеру. Однако в отличие от входных и выходных итераторов, при каждом использовании он обязательно выполняет проход по последовательности значений в одном и том же порядке.
4) Двунаправленный. Обладает всеми свойствами однонаправленного итератора и добавляет к ним поддержку префиксной и постфиксной операции декремента --.
5) Итератор произвольного доступа. Обладает всеми свойствами двунаправленного итератора, а также операциями, которые поддерживают произвольный доступ (операции +, [] и т. д.) и операциями отношения для упорядочения элементов (операции <, <= и т. д.).  

1. Стандартная библиотека шаблонов (STL – «Standard Template Library») — это часть Стандартной библиотеки С++, которая содержит набор шаблонов контейнерных классов (например, std::vector и std::array) и средств доступа к их содержимому, алгоритмов и итераторов. 

2. STL содержит следующие шаблоны классов: 
vector (динамический массив произвольного доступа с автоматическим изменением размера при добавлении/удалении элемента), 
array (массив фиксированного размера), 
valarray (служит для хранения числовых массивов и оптимизирован для достижения повышенной вычислительной производительности), 
stack, 
queue, 
priority_queue (очередь с приоритетом, организованная так, что самый большой элемент всегда стоит на первом месте), 
list (двусвязный список), 
deque (двустороняя очередь), 
set (Упорядоченное множество уникальных элементов. При вставке/удалении элементов множества итераторы, указывающие на элементы этого множества, не становятся недействительными. Обеспечивает стандартные операции над множествами типа объединения, пересечения, вычитания. Тип элементов множества должен реализовывать оператор сравнения operator< или требуется предоставить функцию-компаратор), 
multiset (То же что и set, но позволяет хранить повторяющиеся элементы.), 
map (Упорядоченный ассоциативный массив пар элементов, состоящих из ключей и соответствующих им значений. Ключи должны быть уникальны. Порядок следования элементов определяется ключами), 
multimap (То же что и map, но позволяет хранить несколько одинаковых ключей.) и др.

3. Помимо шаблонов классов, STL также содержит итераторы и универсальные алгоритмы для работы с контейнерами и другие вспомогательные функции. Алгоритмы над контейнерами позволяют, независимо от типа контейнера, работать с его данными с помощью итератора контейнера. Для их использования нужно подключить <algorithm>. Примеры из библиотеки алгоритмов STL:  for_each (для каждого элемента в контейнере вызывает функцию или оператор функтора), transform (применить функцию к каждому элементу между двумя итераторами контейнера и получить другой контейнер, состоящий из элементов, возникающих в результате применения такой функции), sort (сортировка). Также библиотека содержит заголовочный файл functional, который содержит набор шаблонов классов для работы с функциональными объектами, а также набор вспомогательных классов для их использования в алгоритмах стандартной библиотеки. Например, файл содержит функторы, эквивалентные операторам: plus, minus и т. д. для их использования, например, в таких функциях, как transform.